import os
import logging
from dotenv import load_dotenv
from aiogram.types.web_app_info import WebAppInfo
from aiogram.types.inline_keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import CallbackQuery
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from constants import (
    GITHUB_URL,
    START_TEXT,
    START_BUTTON,
    SELFIE,
    HIGH_SCHOOL_PHOTO,
    GPT_VOICE,
    SELFIE_URL,
    HIGH_SCHOOL_PHOTO_URL,
    SQL_NOSQL_VOICE,
    FISRT_LOVE_VOICE,
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
button_labels = [GPT_VOICE, SQL_NOSQL_VOICE, FISRT_LOVE_VOICE]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Returns:
        None
    """
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton(START_BUTTON, web_app=WebAppInfo(url=GITHUB_URL)))
    buttons = [types.KeyboardButton(label) for label in button_labels]
    markup.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(START_TEXT, reply_markup=markup)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    selfie_button = InlineKeyboardButton(SELFIE, callback_data="selfie")
    high_school_photo_button = InlineKeyboardButton(
        HIGH_SCHOOL_PHOTO, callback_data="high_school"
    )
    selfie_markup = InlineKeyboardMarkup().add(selfie_button, high_school_photo_button)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–®–µ–¥–µ–≤—Ä—ã –∏—Å–∫—É—Å—Å—Ç–≤–∞. –ü—Ä–æ–±—É–π—Ç–µ))", reply_markup=selfie_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def send_voice_with_logging_async(chat_id, audio_filename, log_message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

    Args:
        chat_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.
        audio_filename: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É.
        log_message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.

    Returns:
        None
    """
    try:
        logger.info(f"Sending {log_message} voice...")
        with open(audio_filename, "rb") as audio_file:
            await bot.send_voice(chat_id, audio_file)
            logger.info(f"{log_message} voice sent successfully")
    except Exception as e:
        logger.error(f"An error occurred: {e}")
    finally:
        logger.info("Finished processing callback")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(
    lambda message: message.text in [FISRT_LOVE_VOICE, SQL_NOSQL_VOICE, GPT_VOICE]
)
async def send_voice(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

    Args:
        message (types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Returns:
        None
    """
    chat_id = message.from_user.id
    if message.text == FISRT_LOVE_VOICE:
        await send_voice_with_logging_async(
            chat_id, "audio/first_love.ogg", "first love"
        )
    elif message.text == SQL_NOSQL_VOICE:
        await send_voice_with_logging_async(chat_id, "audio/sql_nosql.ogg", "SQL/NOSQL")
    elif message.text == GPT_VOICE:
        await send_voice_with_logging_async(chat_id, "audio/voice_gpt.ogg", "GPT")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
@dp.callback_query_handler(lambda c: c.data in ["selfie", "high_school"])
async def send_photo_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ.

    Args:
        callback_query (CallbackQuery): –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞.

    Returns:
        None
    """
    photo_urls = {"selfie": SELFIE_URL, "high_school": HIGH_SCHOOL_PHOTO_URL}
    photo_caption = {
        "selfie": "–í–æ—Ç –º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–µ–ª—Ñ–∏! üòä",
        "high_school": "–í–æ—Ç –º–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã!",
    }

    data = callback_query.data
    if data in photo_urls:
        await bot.send_photo(
            callback_query.from_user.id, photo_urls[data], caption=photo_caption[data]
        )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
